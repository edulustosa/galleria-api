generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CURATOR
  MEMBER
}

enum Status {
  PENDING
  APPROVED
  REJECT
}

model User {
  id                String   @id @default(uuid())
  username          String
  email             String   @unique
  passwordHash      String   @map("password_hash")
  bio               String?
  profilePictureUrl String?  @map("profile_picture_url")
  role              Role     @default(MEMBER)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  image        Image[]
  comment      Comment[]
  notification Notification[]

  @@map("users")
}

model Image {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  author      String?
  description String?
  url         String
  likes       Int      @default(0)
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  comment Comment[]

  @@map("images")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  imageId   String   @map("image_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id])
  image Image @relation(fields: [imageId], references: [id])

  @@map("comments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
